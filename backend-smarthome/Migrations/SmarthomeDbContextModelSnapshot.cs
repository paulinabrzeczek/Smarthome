// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend_smarthome.DAL;

#nullable disable

namespace backend_smarthome.Migrations
{
    [DbContext(typeof(SmarthomeDbContext))]
    partial class SmarthomeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend_smarthome.DAL.Entity.AddressDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FlatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.ApartmentDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("apartment", (string)null);
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.CountryDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countrys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AT",
                            Value = "Austria"
                        },
                        new
                        {
                            Id = 2,
                            Code = "BE",
                            Value = "Belgium"
                        },
                        new
                        {
                            Id = 3,
                            Code = "BG",
                            Value = "Bulgaria"
                        },
                        new
                        {
                            Id = 4,
                            Code = "HR",
                            Value = "Croatia"
                        },
                        new
                        {
                            Id = 5,
                            Code = "CY",
                            Value = "Cyprus"
                        },
                        new
                        {
                            Id = 6,
                            Code = "CZ",
                            Value = "Czech Republic"
                        },
                        new
                        {
                            Id = 7,
                            Code = "DK",
                            Value = "Denmark"
                        },
                        new
                        {
                            Id = 8,
                            Code = "EE",
                            Value = "Estonia"
                        },
                        new
                        {
                            Id = 9,
                            Code = "FI",
                            Value = "Finland"
                        },
                        new
                        {
                            Id = 10,
                            Code = "FR",
                            Value = "France"
                        },
                        new
                        {
                            Id = 11,
                            Code = "DE",
                            Value = "Germany"
                        },
                        new
                        {
                            Id = 12,
                            Code = "GR",
                            Value = "Greece"
                        },
                        new
                        {
                            Id = 13,
                            Code = "HU",
                            Value = "Hungary"
                        },
                        new
                        {
                            Id = 14,
                            Code = "IE",
                            Value = "Ireland"
                        },
                        new
                        {
                            Id = 15,
                            Code = "IT",
                            Value = "Italy"
                        },
                        new
                        {
                            Id = 16,
                            Code = "LV",
                            Value = "Latvia"
                        },
                        new
                        {
                            Id = 17,
                            Code = "LT",
                            Value = "Lithuania"
                        },
                        new
                        {
                            Id = 18,
                            Code = "LU",
                            Value = "Luxembourg"
                        },
                        new
                        {
                            Id = 19,
                            Code = "MT",
                            Value = "Malta"
                        },
                        new
                        {
                            Id = 20,
                            Code = "NL",
                            Value = "Netherlands"
                        },
                        new
                        {
                            Id = 21,
                            Code = "PL",
                            Value = "Poland"
                        },
                        new
                        {
                            Id = 22,
                            Code = "PT",
                            Value = "Portugal"
                        },
                        new
                        {
                            Id = 23,
                            Code = "RO",
                            Value = "Romania"
                        },
                        new
                        {
                            Id = 24,
                            Code = "SK",
                            Value = "Slovakia"
                        },
                        new
                        {
                            Id = 25,
                            Code = "SI",
                            Value = "Slovenia"
                        },
                        new
                        {
                            Id = 26,
                            Code = "ES",
                            Value = "Spain"
                        },
                        new
                        {
                            Id = 27,
                            Code = "SE",
                            Value = "Sweden"
                        });
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.DeviceDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("RoomId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.DeviceTypeDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "BB",
                            Value = "Bulb"
                        },
                        new
                        {
                            Id = 2,
                            Code = "TV",
                            Value = "Television"
                        },
                        new
                        {
                            Id = 3,
                            Code = "AC",
                            Value = "Air Conditioning"
                        },
                        new
                        {
                            Id = 4,
                            Code = "HS",
                            Value = "Humidity Sensor"
                        },
                        new
                        {
                            Id = 5,
                            Code = "TS",
                            Value = "Temperature Sensor"
                        },
                        new
                        {
                            Id = 6,
                            Code = "OU",
                            Value = "Outlet"
                        });
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.DevicesDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("device_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("serial_number");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique()
                        .HasFilter("[device_id] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("devicess", (string)null);
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.GuestDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("apartment_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastname");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("guest", (string)null);
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.HeadDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DevicesId")
                        .HasColumnType("int");

                    b.Property<double>("IndoorTemp")
                        .HasColumnType("float");

                    b.Property<double>("MaxTemp")
                        .HasColumnType("float");

                    b.Property<double>("MinTemp")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OutdoorTemp")
                        .HasColumnType("float");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("DevicesId");

                    b.HasIndex("RoomId");

                    b.ToTable("Heads");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.RoomDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.RoomTypeDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "BATHROOM",
                            Value = "Bathroom"
                        },
                        new
                        {
                            Id = 2,
                            Code = "BEDROOM",
                            Value = "Bedroom"
                        },
                        new
                        {
                            Id = 3,
                            Code = "KITCHEN",
                            Value = "Kitchen"
                        },
                        new
                        {
                            Id = 4,
                            Code = "LIVING_ROOM",
                            Value = "Living room"
                        },
                        new
                        {
                            Id = 5,
                            Code = "HALL",
                            Value = "Hall"
                        },
                        new
                        {
                            Id = 6,
                            Code = "DINING_ROOM",
                            Value = "Dining room"
                        });
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.UserDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.AddressDb", b =>
                {
                    b.HasOne("backend_smarthome.DAL.Entity.ApartmentDb", "Apartment")
                        .WithOne("Address")
                        .HasForeignKey("backend_smarthome.DAL.Entity.AddressDb", "ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_smarthome.DAL.Entity.CountryDb", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.ApartmentDb", b =>
                {
                    b.HasOne("backend_smarthome.DAL.Entity.UserDb", "User")
                        .WithMany("Apartments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.DeviceDb", b =>
                {
                    b.HasOne("backend_smarthome.DAL.Entity.DeviceTypeDb", "DeviceType")
                        .WithOne("Device")
                        .HasForeignKey("backend_smarthome.DAL.Entity.DeviceDb", "DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_smarthome.DAL.Entity.RoomDb", "Room")
                        .WithMany("Devices")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.DevicesDb", b =>
                {
                    b.HasOne("backend_smarthome.DAL.Entity.DeviceDb", "Device")
                        .WithOne("Devices")
                        .HasForeignKey("backend_smarthome.DAL.Entity.DevicesDb", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend_smarthome.DAL.Entity.UserDb", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId");

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.GuestDb", b =>
                {
                    b.HasOne("backend_smarthome.DAL.Entity.ApartmentDb", "Apartment")
                        .WithMany("Guest")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.HeadDb", b =>
                {
                    b.HasOne("backend_smarthome.DAL.Entity.DeviceTypeDb", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_smarthome.DAL.Entity.DevicesDb", "Devices")
                        .WithMany()
                        .HasForeignKey("DevicesId");

                    b.HasOne("backend_smarthome.DAL.Entity.RoomDb", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");

                    b.Navigation("Devices");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.RoomDb", b =>
                {
                    b.HasOne("backend_smarthome.DAL.Entity.ApartmentDb", "Apartment")
                        .WithMany("Rooms")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_smarthome.DAL.Entity.RoomTypeDb", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.ApartmentDb", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Guest");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.CountryDb", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.DeviceDb", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.DeviceTypeDb", b =>
                {
                    b.Navigation("Device")
                        .IsRequired();
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.RoomDb", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("backend_smarthome.DAL.Entity.UserDb", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
